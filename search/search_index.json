{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"bestariusz/","text":"Bestiariusz \u00b6 https://pl.wikipedia.org/wiki/Kategoria:Izolowane_objawy_psychiatryczne?oldformat=true https://en.wikipedia.org/wiki/Category:Symptoms_and_signs:_Cognition,_perception,_emotional_state_and_behaviour?oldformat=true acromegaly \u00b6 Acromegaly - Wikiwand GitHub - antrov/acromegaly: Adjustable height desk, with provided full CAD plans, controller circuit and iOS client akathisia \u00b6 Akathisia - Wikiwand Akathisia D. I. D. \u00b6 Dissociative identity disorder - Wikiwand ludopatia \u00b6 Ludopat\u00eda - Wikiwand rumination \u00b6 Rumination (psychology) - Wikiwand savant \u00b6 Savant syndrome - Wikiwand voyeur \u00b6 Voyeurism - Wikiwand Voyeur","title":"Bestiariusz"},{"location":"bestariusz/#bestiariusz","text":"https://pl.wikipedia.org/wiki/Kategoria:Izolowane_objawy_psychiatryczne?oldformat=true https://en.wikipedia.org/wiki/Category:Symptoms_and_signs:_Cognition,_perception,_emotional_state_and_behaviour?oldformat=true","title":"Bestiariusz"},{"location":"bestariusz/#acromegaly","text":"Acromegaly - Wikiwand GitHub - antrov/acromegaly: Adjustable height desk, with provided full CAD plans, controller circuit and iOS client","title":"acromegaly"},{"location":"bestariusz/#akathisia","text":"Akathisia - Wikiwand Akathisia","title":"akathisia"},{"location":"bestariusz/#d-i-d","text":"Dissociative identity disorder - Wikiwand","title":"D. I. D."},{"location":"bestariusz/#ludopatia","text":"Ludopat\u00eda - Wikiwand","title":"ludopatia"},{"location":"bestariusz/#rumination","text":"Rumination (psychology) - Wikiwand","title":"rumination"},{"location":"bestariusz/#savant","text":"Savant syndrome - Wikiwand","title":"savant"},{"location":"bestariusz/#voyeur","text":"Voyeurism - Wikiwand Voyeur","title":"voyeur"},{"location":"acromegaly/","text":"","title":"Index"},{"location":"akathisia/","text":"","title":"Index"},{"location":"archival/CookieMonster/UWP/","text":"Universal Windows Platform \u00b6 Przepisywanie aplikacji na UWP zako\u0144czy\u0142o si\u0119 projektach UI dla Desktopa.","title":"Universal Windows Platform"},{"location":"archival/CookieMonster/UWP/#universal-windows-platform","text":"Przepisywanie aplikacji na UWP zako\u0144czy\u0142o si\u0119 projektach UI dla Desktopa.","title":"Universal Windows Platform"},{"location":"archival/CookieMonster/Windows%20Phone%207/","text":"Windows Phone 7 \u00b6 Aplikacja by\u0142a w stanie u\u017cywalno\u015bci, rozw\u00f3j i dodawanie kolejnych funkcji zosta\u0142o zabite wraz z platform\u0105 przez Microsoft. Emulator Demo \u00b6","title":"Windows Phone 7"},{"location":"archival/CookieMonster/Windows%20Phone%207/#windows-phone-7","text":"Aplikacja by\u0142a w stanie u\u017cywalno\u015bci, rozw\u00f3j i dodawanie kolejnych funkcji zosta\u0142o zabite wraz z platform\u0105 przez Microsoft.","title":"Windows Phone 7"},{"location":"archival/CookieMonster/Windows%20Phone%207/#emulator-demo","text":"","title":"Emulator Demo"},{"location":"archival/LegoRider/","text":"Lego Rider \u00b6 Ostatecznie bez Lego. Projekt na zaliczenie przedmiotu ze studi\u00f3w. Rok 2013. Cel projektu \u00b6 Zdalnie sterowany przez smartphone pojazd, w pierwotnym zamy\u015ble zbudowany z klock\u00f3w Lego, ale z\u0119batek na przek\u0142adnie nie starczy\u0142o. W pierwotnym zamy\u015ble mia\u0142 znale\u017a\u0107 si\u0119 jeszcze tam czujnik ultrad\u017awi\u0119kowy osadzony na silniku krokowym, umo\u017clwiaj\u0105cy stworzenie mapy pomieszczenia po kt\u00f3rym pojazd by si\u0119 porusza\u0142. Pomys\u0142 ten jednak zosta\u0142 zarzucony, ze wzgl\u0119du na cen\u0119 modu\u0142u ultrad\u017awi\u0119kowego oraz brak precyzji w poruszaniu si\u0119 podwozia. Realizacja \u00b6 Zdalne sterowanie odbywa\u0142o si\u0119 za pomoc\u0105 smartphone, pod\u0142\u0105czonego przez Wi-Fi do Raspberry Pi pracuj\u0105cego w formie huba z serwerem TCP z pod\u0142\u0105czonym do niego modu\u0142em bezprzewodowym NRF24L01 i komunikuj\u0105cym si\u0119 z docelowym uk\u0142adem steruj\u0105cym wyposa\u017conym w uk\u0142ad ATmega328 (z Arduino) oraz modu\u0142 NRF24L01. Prze\u0142o\u017cenie sygna\u0142\u00f3w z ATmegi na pr\u0105d steruj\u0105cy silnikami odbywa\u0142o si\u0119 za pomoc\u0105 mostku H, zbudowanego z tranzystor\u00f3w typu darlington. ATmega \u00b6 Do realizacji uk\u0142adu steruj\u0105cego opartego na ATmedze, zosta\u0142o wykorzystane Arduino Uno wraz ze \u015brodowiskiem domy\u015blnie je wspieraj\u0105cym. W celu komunikacji z modu\u0142em NRF24L01 zosta\u0142a wykorzystana biblioteka RF24, kt\u00f3ra zosta\u0142a stworzona do wsp\u00f3\u0142pracy w\u0142a\u015bnie z Arduino oraz Raspberry Pi (librf24-rpi). Aby mo\u017cliwe by\u0142o u\u017cywanie ATmegi poza p\u0142ytk\u0105 i bez zewn\u0119trznego kwarcu, niezb\u0119dne by\u0142o wypalenie odpowiedniego bootloadera za pomoc\u0105 zewn\u0119trznego programatora, kt\u00f3ry wymaga\u0142 dodatkowej konfiguracji (boards.txt oraz programmers.txt). Program \u00b6 Program po otrzymaniu wiadomo\u015bci przez NRF24L01 sprawdza\u0142 pierwszy znak: dla r sterowa\u0142 cyfrowo pinami 3 i 5 (PD3 i PD5) a dla l sterowa\u0142 pinami 10 i 6 (PB2 i PD6), w zale\u017cno\u015bci od otrzymanej po literze warto\u015bci liczbowej w przedziale (-100,100). Uk\u0142ad i p\u0142ytka PCB \u00b6 ATmega \u00b6 Podczas projektowania p\u0142ytki uwzgl\u0119dnione zosta\u0142o po\u0142o\u017cenie pon\u00f3w ATmegi wzgl\u0119dem ich umiejscowienia w Arduino Uno. Pod uwag\u0119 brane by\u0142o wykorzystanie ATmegi8, jednak nie posiada ona wystarczaj\u0105cej ilo\u015bci wyj\u015b\u0107 PWM. Wykorzystanie tutaj ATmegi8/168/328 dla pod\u0142\u0105cze\u0144 nie ma \u017cadnego znaczenia, komunikuj\u0105 si\u0119 one na tych samych pinach z modu\u0142em NRF24L01 oraz mostkiem H. Mostek H \u00b6 Do sterowania pr\u0105dem silnik\u00f3w z powodzeniem mo\u017ce s\u0142u\u017cy\u0107 mostek L293, nie by\u0142 on jednak dost\u0119pny w zapyzia\u0142ym Kaliszu. Zwi\u0105zku z tym zosta\u0142 wykonany odpowiedni uk\u0142ad mostka z tranzystor\u00f3w typu darlington PNP BD680 oraz NPN BD679. Zasilanie \u00b6 Zasilaniem ATmegi zajmuje si\u0119 uk\u0142ad L7805CV, zmieniaj\u0105cy napi\u0119cie do 5V, a za zasilanie modu\u0142u NRF224L01 odpowiedzialny jest uk\u0142ad LM317T z opornikami 360\u2126 oraz 500\u2126 Raspberry Pi \u00b6 Aby umo\u017cliwi\u0107 komunikacj\u0119 przez z\u0142\u0105cze SPI niezb\u0119dne by\u0142o wgranie dystrybucji Occidencialis x 0.2 oraz aktualizacja jej do najnowszej wersji j\u0105dra, aby mo\u017cliwe by\u0142o po\u0142\u0105czenie WiFi. Instalacja sterownika NRF W programie dzia\u0142a serwer TCP, kt\u00f3ry zostaje zamkni\u0119ty po roz\u0142\u0105czeniu si\u0119 klienta. Automatycznie po otrzymaniu wiadomo\u015bci od klienta, jest ona przekazywana dalej do ATmegi przesz nRF24L01. Aplikacja dla Windows Phone 7 \u00b6 Stworzenie dw\u00f3ch wirtualnych joystick\u00f3w wykluczy\u0142o u\u017cycie komponentu Thumb, Zamiast tego nale\u017ca\u0142o wykorzysta\u0107 Framework XNA i Frame Touch Report, kt\u00f3ry podawa\u0142 list\u0119 wszystkich punkt\u00f3w dotyku. Ka\u017cdy z tych punkt\u00f3w by\u0142 \u015bledzony przez Joystick, kt\u00f3ry zosta\u0142 wcze\u015bniej przez punkt z listy o danym indeksie naci\u015bni\u0119ty. Niedoci\u0105gni\u0119cia warte poprawy \u00b6 Uk\u0142ad i p\u0142ytka PCB i ATmega \u00b6 ATmega i mostek po\u0142\u0105czone samymi PWM \u00b6 Sprawdzenie czy silnik skr\u0119caj\u0105cy osi\u0105gn\u0105\u0142 ju\u017c maksimum i zaprzesta\u0107 wtedy obracania nim W\u0142\u0105cznik/wy\u0142\u0105cznik uk\u0142adu na p\u0142ytce Zasilanie NRF24L01 na p\u0142ytce Wi\u0119ksza optymalizacja p\u0142ytki i zmniejszenie jej rozmiaru Raspberry Pi \u00b6 Serwer kt\u00f3ry nie przestaje nas\u0142uchiwa\u0107 po roz\u0142\u0105czeniu si\u0119 klienta Sprawdzanie poprawno\u015bci przesy\u0142anych dalej warto\u015bci Wi\u0119ksza odporno\u015b\u0107 na b\u0142\u0119dy Hotspot WiFi do kt\u00f3rego pod\u0142\u0105cza si\u0119 telefon Ograniczenie wysy\u0142ania danych do ATmegi, aby odbywa\u0142o si\u0119 to w czasie rzeczywistym, a nie z op\u00f3\u017anieniem Skanowanie w poszukiwaniu dzia\u0142aj\u0105cego odbiornika z ATmeg\u0105 i informowanie o tym Smartphone","title":"Lego Rider"},{"location":"archival/LegoRider/#lego-rider","text":"Ostatecznie bez Lego. Projekt na zaliczenie przedmiotu ze studi\u00f3w. Rok 2013.","title":"Lego Rider"},{"location":"archival/LegoRider/#cel-projektu","text":"Zdalnie sterowany przez smartphone pojazd, w pierwotnym zamy\u015ble zbudowany z klock\u00f3w Lego, ale z\u0119batek na przek\u0142adnie nie starczy\u0142o. W pierwotnym zamy\u015ble mia\u0142 znale\u017a\u0107 si\u0119 jeszcze tam czujnik ultrad\u017awi\u0119kowy osadzony na silniku krokowym, umo\u017clwiaj\u0105cy stworzenie mapy pomieszczenia po kt\u00f3rym pojazd by si\u0119 porusza\u0142. Pomys\u0142 ten jednak zosta\u0142 zarzucony, ze wzgl\u0119du na cen\u0119 modu\u0142u ultrad\u017awi\u0119kowego oraz brak precyzji w poruszaniu si\u0119 podwozia.","title":"Cel projektu"},{"location":"archival/LegoRider/#realizacja","text":"Zdalne sterowanie odbywa\u0142o si\u0119 za pomoc\u0105 smartphone, pod\u0142\u0105czonego przez Wi-Fi do Raspberry Pi pracuj\u0105cego w formie huba z serwerem TCP z pod\u0142\u0105czonym do niego modu\u0142em bezprzewodowym NRF24L01 i komunikuj\u0105cym si\u0119 z docelowym uk\u0142adem steruj\u0105cym wyposa\u017conym w uk\u0142ad ATmega328 (z Arduino) oraz modu\u0142 NRF24L01. Prze\u0142o\u017cenie sygna\u0142\u00f3w z ATmegi na pr\u0105d steruj\u0105cy silnikami odbywa\u0142o si\u0119 za pomoc\u0105 mostku H, zbudowanego z tranzystor\u00f3w typu darlington.","title":"Realizacja"},{"location":"archival/LegoRider/#atmega","text":"Do realizacji uk\u0142adu steruj\u0105cego opartego na ATmedze, zosta\u0142o wykorzystane Arduino Uno wraz ze \u015brodowiskiem domy\u015blnie je wspieraj\u0105cym. W celu komunikacji z modu\u0142em NRF24L01 zosta\u0142a wykorzystana biblioteka RF24, kt\u00f3ra zosta\u0142a stworzona do wsp\u00f3\u0142pracy w\u0142a\u015bnie z Arduino oraz Raspberry Pi (librf24-rpi). Aby mo\u017cliwe by\u0142o u\u017cywanie ATmegi poza p\u0142ytk\u0105 i bez zewn\u0119trznego kwarcu, niezb\u0119dne by\u0142o wypalenie odpowiedniego bootloadera za pomoc\u0105 zewn\u0119trznego programatora, kt\u00f3ry wymaga\u0142 dodatkowej konfiguracji (boards.txt oraz programmers.txt).","title":"ATmega"},{"location":"archival/LegoRider/#program","text":"Program po otrzymaniu wiadomo\u015bci przez NRF24L01 sprawdza\u0142 pierwszy znak: dla r sterowa\u0142 cyfrowo pinami 3 i 5 (PD3 i PD5) a dla l sterowa\u0142 pinami 10 i 6 (PB2 i PD6), w zale\u017cno\u015bci od otrzymanej po literze warto\u015bci liczbowej w przedziale (-100,100).","title":"Program"},{"location":"archival/LegoRider/#ukad-i-pytka-pcb","text":"","title":"Uk\u0142ad i p\u0142ytka PCB"},{"location":"archival/LegoRider/#atmega_1","text":"Podczas projektowania p\u0142ytki uwzgl\u0119dnione zosta\u0142o po\u0142o\u017cenie pon\u00f3w ATmegi wzgl\u0119dem ich umiejscowienia w Arduino Uno. Pod uwag\u0119 brane by\u0142o wykorzystanie ATmegi8, jednak nie posiada ona wystarczaj\u0105cej ilo\u015bci wyj\u015b\u0107 PWM. Wykorzystanie tutaj ATmegi8/168/328 dla pod\u0142\u0105cze\u0144 nie ma \u017cadnego znaczenia, komunikuj\u0105 si\u0119 one na tych samych pinach z modu\u0142em NRF24L01 oraz mostkiem H.","title":"ATmega"},{"location":"archival/LegoRider/#mostek-h","text":"Do sterowania pr\u0105dem silnik\u00f3w z powodzeniem mo\u017ce s\u0142u\u017cy\u0107 mostek L293, nie by\u0142 on jednak dost\u0119pny w zapyzia\u0142ym Kaliszu. Zwi\u0105zku z tym zosta\u0142 wykonany odpowiedni uk\u0142ad mostka z tranzystor\u00f3w typu darlington PNP BD680 oraz NPN BD679.","title":"Mostek H"},{"location":"archival/LegoRider/#zasilanie","text":"Zasilaniem ATmegi zajmuje si\u0119 uk\u0142ad L7805CV, zmieniaj\u0105cy napi\u0119cie do 5V, a za zasilanie modu\u0142u NRF224L01 odpowiedzialny jest uk\u0142ad LM317T z opornikami 360\u2126 oraz 500\u2126","title":"Zasilanie"},{"location":"archival/LegoRider/#raspberry-pi","text":"Aby umo\u017cliwi\u0107 komunikacj\u0119 przez z\u0142\u0105cze SPI niezb\u0119dne by\u0142o wgranie dystrybucji Occidencialis x 0.2 oraz aktualizacja jej do najnowszej wersji j\u0105dra, aby mo\u017cliwe by\u0142o po\u0142\u0105czenie WiFi. Instalacja sterownika NRF W programie dzia\u0142a serwer TCP, kt\u00f3ry zostaje zamkni\u0119ty po roz\u0142\u0105czeniu si\u0119 klienta. Automatycznie po otrzymaniu wiadomo\u015bci od klienta, jest ona przekazywana dalej do ATmegi przesz nRF24L01.","title":"Raspberry Pi"},{"location":"archival/LegoRider/#aplikacja-dla-windows-phone-7","text":"Stworzenie dw\u00f3ch wirtualnych joystick\u00f3w wykluczy\u0142o u\u017cycie komponentu Thumb, Zamiast tego nale\u017ca\u0142o wykorzysta\u0107 Framework XNA i Frame Touch Report, kt\u00f3ry podawa\u0142 list\u0119 wszystkich punkt\u00f3w dotyku. Ka\u017cdy z tych punkt\u00f3w by\u0142 \u015bledzony przez Joystick, kt\u00f3ry zosta\u0142 wcze\u015bniej przez punkt z listy o danym indeksie naci\u015bni\u0119ty.","title":"Aplikacja dla Windows Phone 7"},{"location":"archival/LegoRider/#niedociagniecia-warte-poprawy","text":"","title":"Niedoci\u0105gni\u0119cia warte poprawy"},{"location":"archival/LegoRider/#ukad-i-pytka-pcb-i-atmega","text":"","title":"Uk\u0142ad i p\u0142ytka PCB i ATmega"},{"location":"archival/LegoRider/#atmega-i-mostek-poaczone-samymi-pwm","text":"Sprawdzenie czy silnik skr\u0119caj\u0105cy osi\u0105gn\u0105\u0142 ju\u017c maksimum i zaprzesta\u0107 wtedy obracania nim W\u0142\u0105cznik/wy\u0142\u0105cznik uk\u0142adu na p\u0142ytce Zasilanie NRF24L01 na p\u0142ytce Wi\u0119ksza optymalizacja p\u0142ytki i zmniejszenie jej rozmiaru","title":"ATmega i mostek po\u0142\u0105czone samymi PWM"},{"location":"archival/LegoRider/#raspberry-pi_1","text":"Serwer kt\u00f3ry nie przestaje nas\u0142uchiwa\u0107 po roz\u0142\u0105czeniu si\u0119 klienta Sprawdzanie poprawno\u015bci przesy\u0142anych dalej warto\u015bci Wi\u0119ksza odporno\u015b\u0107 na b\u0142\u0119dy Hotspot WiFi do kt\u00f3rego pod\u0142\u0105cza si\u0119 telefon Ograniczenie wysy\u0142ania danych do ATmegi, aby odbywa\u0142o si\u0119 to w czasie rzeczywistym, a nie z op\u00f3\u017anieniem Skanowanie w poszukiwaniu dzia\u0142aj\u0105cego odbiornika z ATmeg\u0105 i informowanie o tym Smartphone","title":"Raspberry Pi"},{"location":"archival/LegoRider/atmega/","text":"ATmega \u00b6 LegoRiderArduino.ino \u00b6 #include <SPI.h> #include \"nRF24L01.h\" #include \"RF24.h\" //CE pin, CSN pin RF24 radio ( 8 , 7 ); // Radio pipe addresses for the 2 nodes to communicate. //const uint64_t pipes[6] = { 0xF0F0F0F0D2LL, 0xF0F0F0F0E1LL, 0xF0F0F0F0E2LL, 0xF0F0F0F0E3LL, 0xF0F0F0F0E4LL, 0xF0F0F0F0E5LL }; // bytes serv1 = 0x7365727631 in hex const uint64_t pipes [ 6 ] = { 0xF0F0F0F0E1LL , 0xF0F0F0F0E1LL , 0xF0F0F0F0E2LL , 0xF0F0F0F0E3LL , 0xF0F0F0F0E4LL , 0xF0F0F0F0E5LL }; void setup ( void ) { pinMode ( 10 , OUTPUT ); pinMode ( 6 , OUTPUT ); pinMode ( 3 , OUTPUT ); pinMode ( 5 , OUTPUT ); analogWrite ( 10 , 0 ); analogWrite ( 6 , 0 ); digitalWrite ( 3 , LOW ); digitalWrite ( 5 , LOW ); digitalWrite ( 2 , HIGH ); delay ( 500 ); digitalWrite ( 2 , LOW ); radio . begin (); radio . setDataRate ( RF24_1MBPS ); radio . setPALevel ( RF24_PA_MAX ); radio . setChannel ( 76 ); radio . enableDynamicPayloads (); radio . setRetries ( 15 , 15 ); radio . setCRCLength ( RF24_CRC_16 ); radio . openWritingPipe ( pipes [ 0 ]); radio . openReadingPipe ( 1 , pipes [ 1 ]); radio . openReadingPipe ( 2 , pipes [ 2 ]); radio . openReadingPipe ( 3 , pipes [ 3 ]); radio . openReadingPipe ( 4 , pipes [ 4 ]); radio . openReadingPipe ( 5 , pipes [ 5 ]); radio . startListening (); //radio.printDetails(); delay ( 1000 ); } int incomingByte = 0 ; // for incoming serial data void loop ( void ) { char receivePayload [ 31 ] = \"\" ; uint8_t len = 0 ; uint8_t pipe = 0 ; // Loop thru the pipes 0 to 5 and check for payloads if ( radio . available ( & pipe ) ) { bool done = false ; while ( ! done ) { len = radio . getDynamicPayloadSize (); done = radio . read ( & receivePayload , len ); String msg = receivePayload ; int val = msg . substring ( 1 , msg . length ()). toInt (); int val2 = map ( abs ( val ), 0 , 100 , 0 , 255 ); if ( msg [ 0 ] == 'l' ){ if ( val < 0 ) { analogWrite ( 10 , val2 ); analogWrite ( 6 , 0 ); } if ( val > 0 ) { analogWrite ( 10 , 0 ); analogWrite ( 6 , val2 ); } if ( val == 0 ) { analogWrite ( 10 , 0 ); analogWrite ( 6 , 0 ); } } if ( msg [ 0 ] == 'r' ){ //printf(\"Got payload: %s. Transform \\\"%i\\\" to %i\\n\\r\",receivePayload,val,val2); if ( val < 0 ){ digitalWrite ( 3 , LOW ); digitalWrite ( 5 , HIGH ); } if ( val > 0 ){ digitalWrite ( 3 , HIGH ); digitalWrite ( 5 , LOW ); } if ( val == 0 ){ digitalWrite ( 3 , LOW ); digitalWrite ( 5 , LOW ); } } pipe ++ ; if ( pipe > 5 ) pipe = 0 ; } } } boards.txt \u00b6 # See: http://code.google.com/p/arduino/wiki/Platforms atmega328bb.name=ATmega328 on a breadboard (8 MHz internal clock) atmega328bb.upload.protocol=stk500 atmega328bb.upload.maximum_size=30720 atmega328bb.upload.speed=57600 atmega328bb.bootloader.low_fuses=0xE2 atmega328bb.bootloader.high_fuses=0xDA atmega328bb.bootloader.extended_fuses=0x05 atmega328bb.bootloader.path=arduino:atmega atmega328bb.bootloader.file=ATmegaBOOT_168_atmega328_pro_8MHz.hex atmega328bb.bootloader.unlock_bits=0x3F atmega328bb.bootloader.lock_bits=0x0F atmega328bb.build.mcu=atmega328p atmega328bb.build.f_cpu=8000000L atmega328bb.build.core=arduino:arduino atmega328bb.build.variant=arduino:standard programmers.txt \u00b6 stk500.name=AVR ISP stk500v2 stk500.communication=serial stk500.protocol=stk500v2","title":"ATmega"},{"location":"archival/LegoRider/atmega/#atmega","text":"","title":"ATmega"},{"location":"archival/LegoRider/atmega/#legoriderarduinoino","text":"#include <SPI.h> #include \"nRF24L01.h\" #include \"RF24.h\" //CE pin, CSN pin RF24 radio ( 8 , 7 ); // Radio pipe addresses for the 2 nodes to communicate. //const uint64_t pipes[6] = { 0xF0F0F0F0D2LL, 0xF0F0F0F0E1LL, 0xF0F0F0F0E2LL, 0xF0F0F0F0E3LL, 0xF0F0F0F0E4LL, 0xF0F0F0F0E5LL }; // bytes serv1 = 0x7365727631 in hex const uint64_t pipes [ 6 ] = { 0xF0F0F0F0E1LL , 0xF0F0F0F0E1LL , 0xF0F0F0F0E2LL , 0xF0F0F0F0E3LL , 0xF0F0F0F0E4LL , 0xF0F0F0F0E5LL }; void setup ( void ) { pinMode ( 10 , OUTPUT ); pinMode ( 6 , OUTPUT ); pinMode ( 3 , OUTPUT ); pinMode ( 5 , OUTPUT ); analogWrite ( 10 , 0 ); analogWrite ( 6 , 0 ); digitalWrite ( 3 , LOW ); digitalWrite ( 5 , LOW ); digitalWrite ( 2 , HIGH ); delay ( 500 ); digitalWrite ( 2 , LOW ); radio . begin (); radio . setDataRate ( RF24_1MBPS ); radio . setPALevel ( RF24_PA_MAX ); radio . setChannel ( 76 ); radio . enableDynamicPayloads (); radio . setRetries ( 15 , 15 ); radio . setCRCLength ( RF24_CRC_16 ); radio . openWritingPipe ( pipes [ 0 ]); radio . openReadingPipe ( 1 , pipes [ 1 ]); radio . openReadingPipe ( 2 , pipes [ 2 ]); radio . openReadingPipe ( 3 , pipes [ 3 ]); radio . openReadingPipe ( 4 , pipes [ 4 ]); radio . openReadingPipe ( 5 , pipes [ 5 ]); radio . startListening (); //radio.printDetails(); delay ( 1000 ); } int incomingByte = 0 ; // for incoming serial data void loop ( void ) { char receivePayload [ 31 ] = \"\" ; uint8_t len = 0 ; uint8_t pipe = 0 ; // Loop thru the pipes 0 to 5 and check for payloads if ( radio . available ( & pipe ) ) { bool done = false ; while ( ! done ) { len = radio . getDynamicPayloadSize (); done = radio . read ( & receivePayload , len ); String msg = receivePayload ; int val = msg . substring ( 1 , msg . length ()). toInt (); int val2 = map ( abs ( val ), 0 , 100 , 0 , 255 ); if ( msg [ 0 ] == 'l' ){ if ( val < 0 ) { analogWrite ( 10 , val2 ); analogWrite ( 6 , 0 ); } if ( val > 0 ) { analogWrite ( 10 , 0 ); analogWrite ( 6 , val2 ); } if ( val == 0 ) { analogWrite ( 10 , 0 ); analogWrite ( 6 , 0 ); } } if ( msg [ 0 ] == 'r' ){ //printf(\"Got payload: %s. Transform \\\"%i\\\" to %i\\n\\r\",receivePayload,val,val2); if ( val < 0 ){ digitalWrite ( 3 , LOW ); digitalWrite ( 5 , HIGH ); } if ( val > 0 ){ digitalWrite ( 3 , HIGH ); digitalWrite ( 5 , LOW ); } if ( val == 0 ){ digitalWrite ( 3 , LOW ); digitalWrite ( 5 , LOW ); } } pipe ++ ; if ( pipe > 5 ) pipe = 0 ; } } }","title":"LegoRiderArduino.ino"},{"location":"archival/LegoRider/atmega/#boardstxt","text":"# See: http://code.google.com/p/arduino/wiki/Platforms atmega328bb.name=ATmega328 on a breadboard (8 MHz internal clock) atmega328bb.upload.protocol=stk500 atmega328bb.upload.maximum_size=30720 atmega328bb.upload.speed=57600 atmega328bb.bootloader.low_fuses=0xE2 atmega328bb.bootloader.high_fuses=0xDA atmega328bb.bootloader.extended_fuses=0x05 atmega328bb.bootloader.path=arduino:atmega atmega328bb.bootloader.file=ATmegaBOOT_168_atmega328_pro_8MHz.hex atmega328bb.bootloader.unlock_bits=0x3F atmega328bb.bootloader.lock_bits=0x0F atmega328bb.build.mcu=atmega328p atmega328bb.build.f_cpu=8000000L atmega328bb.build.core=arduino:arduino atmega328bb.build.variant=arduino:standard","title":"boards.txt"},{"location":"archival/LegoRider/atmega/#programmerstxt","text":"stk500.name=AVR ISP stk500v2 stk500.communication=serial stk500.protocol=stk500v2","title":"programmers.txt"},{"location":"archival/LegoRider/pcb/","text":"PCB \u00b6","title":"PCB"},{"location":"archival/LegoRider/pcb/#pcb","text":"","title":"PCB"},{"location":"archival/LegoRider/raspberry/","text":"","title":"Raspberry"},{"location":"challengeme/","text":"","title":"Index"},{"location":"lowpolyflame/","text":"","title":"Index"},{"location":"savant/","text":"","title":"Index"},{"location":"voyeur/","text":"Voyeur \u00b6 aka crutch-watch, aka czajnitoring Ogl\u0105dactwo, voyeuryzm, voyeryzm, voyeurism, wojeryzm, skopofilia, skoptofilia \u2013 zaburzenie zachowania z grupy zaburze\u0144 preferencji seksualnych charakteryzuj\u0105ce si\u0119 sk\u0142onno\u015bci\u0105 do ogl\u0105dania innych ludzi podczas zachowa\u0144 seksualnych. 1 https://www.wikiwand.com/pl/Ogl%C4%85dactwo \u21a9","title":"Voyeur"},{"location":"voyeur/#voyeur","text":"aka crutch-watch, aka czajnitoring Ogl\u0105dactwo, voyeuryzm, voyeryzm, voyeurism, wojeryzm, skopofilia, skoptofilia \u2013 zaburzenie zachowania z grupy zaburze\u0144 preferencji seksualnych charakteryzuj\u0105ce si\u0119 sk\u0142onno\u015bci\u0105 do ogl\u0105dania innych ludzi podczas zachowa\u0144 seksualnych. 1 https://www.wikiwand.com/pl/Ogl%C4%85dactwo \u21a9","title":"Voyeur"}]}